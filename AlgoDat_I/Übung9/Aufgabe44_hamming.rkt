#lang racket
(define (hamming firstBin secBin)
  (define (hamIter firstBin secBin counter)
    (if (> (length firstBin) (length secBin))
        (if (null? secBin)
            (+ counter (length firstBin))
            (if (equal? (car firstBin) (car secBin))
                (hamIter (cdr firstBin) (cdr secBin) counter)
                (hamIter (cdr firstBin) (cdr secBin) (+ counter 1))
                )
            )
        (if (null? firstBin)
            (+ counter (length secBin))
            (if (equal? (car firstBin) (car secBin))
                (hamIter (cdr firstBin) (cdr secBin) counter)
                (hamIter (cdr firstBin) (cdr secBin) (+ counter 1))
                )
            )
        )
    )
  (hamIter firstBin secBin 0)
  )

(hamming '(1 0 1 1 0 1 0 1) '(0 1 1 1 0 1 0 0))
(hamming '(1 0 1) '(1 0 1))
(hamming '() '())
(hamming '(1 0 0 1 0 0 1 0 1) '(1 0 0 0 1 0 1))